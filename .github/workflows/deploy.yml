name: Full CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # ======================
  # Continuous Integration
  # ======================
  ci:
    runs-on: self-hosted

    steps:
      # 1. Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # 3. Linting (skip failure)
      - name: Lint Python Code
        continue-on-error: true
        run: |
          pip install pylint
          pylint backend/app.py backend/deployer/backend.py

      # 4. Static Analysis (skip failure)
      - name: Static Analysis
        continue-on-error: true
        run: |
          pip install bandit
          bandit -r backend

      # 5. Install dependencies
      - name: Install Dependencies
        run: pip install -r backend/requirements.txt

      # 6. Run Unit Tests
      - name: Run Unit Tests
        run: |
          pip install pytest
          pytest backend

      # 7. Build Docker Images
      - name: Build Docker Images
        run: |
          # Build backend image
          docker build -t ashwanth01/ashapp-backend:latest ./backend
          # Build deployer image using Dockerfile-deployer
          docker build -t ashwanth01/ashapp-deployer:latest -f ./backend/Dockerfile-deployer ./backend

      # 8. Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 9. Push Docker Images
      - name: Push Docker Images
        run: |
          docker push ashwanth01/ashapp-backend:latest
          docker push ashwanth01/ashapp-deployer:latest

      # 10. Dynamic Security Testing (skip failure)
      - name: Dynamic Security Testing
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ashwanth01/ashapp-backend:latest'
          format: 'table'
          exit-code: '1'

  # ==========================
  # Continuous Deployment
  # ==========================
  cd:
    runs-on: self-hosted
    needs: ci

    steps:
      # 1. Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Deploy to Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f ./backend/k8s/backend-deployment.yaml
          kubectl apply -f ./backend/k8s/backend-service.yaml
          kubectl apply -f ./backend/k8s/deployer-deployment.yaml
          kubectl apply -f ./backend/k8s/deployer-service.yaml
          kubectl rollout status deployment/backend-deployment --timeout=120s
          kubectl rollout status deployment/deployer-deployment --timeout=120s
          kubectl get pods
          kubectl get svc

      # 3. Print Flask App URL
      - name: Print Flask App URL
        run: |
          NODE_PORT=$(kubectl get svc backend-service -o jsonpath='{.spec.ports[0].nodePort}')
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          echo "Backend Flask app is running at: http://$NODE_IP:$NODE_PORT"
          NODE_PORT_DEPLOYER=$(kubectl get svc deployer-service -o jsonpath='{.spec.ports[0].nodePort}')
          echo "Deployer app is running at: http://$NODE_IP:$NODE_PORT_DEPLOYER"
