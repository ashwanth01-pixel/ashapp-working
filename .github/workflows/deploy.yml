name: Full CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # ======================
  # Continuous Integration
  # ======================
  ci:
    runs-on: self-hosted

    steps:
      # 1. Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ---------------- Linting ----------------
      # Technology: flake8 (Python Linter)
      - name: Install Backend Linter
        run: |
          python -m pip install --upgrade pip
          pip install flake8
      - name: Run Backend Lint
        continue-on-error: true
        run: flake8 ./backend

      # ---------------- Static Application Security Testing (SAST) ----------------
      # Technology: CodeQL (Backend SAST)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

      # ---------------- Software Composition Analysis (SCA) ----------------
      # Technology: Snyk (Dependency Scan)
      - name: Backend Dependency Scan
        run: |
          npm install -g snyk
          snyk test || true

      # ---------------- Unit Tests ----------------
      # Technology: pytest (Backend Unit Testing)
      - name: Install Backend Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest
      - name: Run Backend Unit Tests
        continue-on-error: true
        run: pytest backend/tests

      # ---------------- Docker Build & Push ----------------
      # Technology: Docker
      - name: Login to Docker Hub
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      - name: Build Backend Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/3-tier-app-backend:latest ./backend
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/3-tier-app-backend:latest

      # ---------------- Container Security Scan ----------------
      # Technology: Trivy (Container Image Vulnerability Scan)
      - name: Scan Backend Docker Image
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/3-tier-app-backend:latest
          format: table
          exit-code: 0

  # ==========================
  # Continuous Deployment
  # ==========================
  cd:
    runs-on: self-hosted
    needs: ci

    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # ---------------- Kubernetes Deployment ----------------
      # Technology: kubectl (Kubernetes Deployment)
      - name: Deploy Backend
        run: |
          kubectl apply -f k8s/
          kubectl rollout status deployment/backend-deployment --timeout=40s
          kubectl get pods
          kubectl get svc

      # ---------------- Print App URL ----------------
      # Technology: kubectl + NodePort
      - name: Print Backend App URL
        run: |
          NODE_PORT=$(kubectl get svc backend-service -o jsonpath='{.spec.ports[0].nodePort}')
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          echo "Backend app running at: http://$NODE_IP:$NODE_PORT"
