name: Full CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  # ======================
  # Continuous Integration
  # ======================
  ci:
    runs-on: self-hosted

    steps:
      # 1. Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Linting (skip failure)
      - name: Lint Python Code
        continue-on-error: true
        run: |
          pip install pylint
          pylint backend/app.py backend/deployer/backend.py

      # 3. Software Component Analysis (SAST, skip failure)
      - name: Static Analysis
        continue-on-error: true
        run: |
          pip install bandit
          bandit -r backend

      # 4. Build / Install dependencies (skip failure)
      - name: Install Dependencies
        continue-on-error: true
        run: pip install -r backend/requirements.txt

      # 5. Unit Tests (skip failure)
      - name: Run Unit Tests
        continue-on-error: true
        run: |
          pip install pytest
          pytest backend

      # 6. Create Docker Image with commit SHA tag
      - name: Build Docker Image
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}   # short commit SHA
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker build -t ashwanth01/ashapp:$IMAGE_TAG ./backend

      # 7. Login & Push Docker Image
      - name: Push Docker Image to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - run: docker push ashwanth01/ashapp:${IMAGE_TAG}

      # 8. DAST (basic scan, skip failure)
      - name: Dynamic Security Testing
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ashwanth01/ashapp:${IMAGE_TAG}'
          format: 'table'
          exit-code: '1'

  # ==========================
  # Continuous Deployment
  # ==========================
  cd:
    runs-on: self-hosted
    needs: ci

    steps:
      # 1. Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Deploy to Kubernetes with new image tag
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f ./backend/k8s/backend-deployment.yaml
          kubectl apply -f ./backend/k8s/backend-service.yaml
          kubectl set image deployment/backend-deployment backend=ashwanth01/ashapp:${IMAGE_TAG}
          kubectl rollout status deployment/backend-deployment --timeout=120s
          kubectl get pods
          kubectl get svc

      # 3. Print App URL
      - name: Print Flask App URL
        run: |
          NODE_PORT=$(kubectl get svc backend-service -o jsonpath='{.spec.ports[0].nodePort}')
          NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
          echo "Flask app is running at: http://$NODE_IP:$NODE_PORT"
